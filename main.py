# любой текст от символа # и до конца строки — это комментарий

# print — это функция, которая выводит информацию на экран
# параметры (аргументы) функций берутся в круглые скобки
# "Hello, World!" — это строка, которую мы выводим
print("Hello, World!")

print('Hello, World!')  # также строки можно брать и в одинарные кавычки

# функция print может принимать несколько параметров
# когда мы передаём несколько значений в функцию, то они
# разделяются запятыми
print('first', 'second')

# здесь мы создаём переменную name (переменные подробно
# рассматриваются в следующем уроке)
# переменной name мы присваиваем значение 'Alex'
name = 'Alex'
# после этого можно обращаться к данному значению по имени
print(name)

# input — функция, которая приостанавливает выполнение программы,
# пока пользователь не введёт значение и нажмёт клавишу Enter.
# Функция возвращает введённое значение.
text = input('Enter some text: ')
print(text)

# Важно понимать, что input возвращает строку (типы данных
# мы подробно рассмотрим во втором уроке).
# Функция float конвертирует строковое значение в вещественное,
# над которым можно выполнять арифметические операции
x = float(input('Введите первое число: '))
y = float(input('Введите второе число: '))
# Здесь мы ничего не преобразовываем, поэтому operation — строка.
operation = input('Введите знак арифметической операции: ')

# Присвоим переменной result значение None
# (None — это специальное значение, указывающее, что
# значение объекта неизвестно)
result = None
# if-elif-else (если - иначе если - иначе) — условный оператор.
# Он позволяет выполнять разные участки кода в зависимости от определённых
# условий и будет рассмотрен в уроке №3.
# Операция == проверяет два значения на равенство
if operation == '+':
    # К числам можно применять арифметические операции
    # (более подробно арифметические операции будут рассмотрены в уроке №2).
    result = x + y
elif operation == '-':
    result = x - y
elif operation == '*':
    result = x * y
elif operation == '/':
    result = x / y
elif operation == '^':
    result = x ** y  # ** — операция возведения в степень
else:
    print('Неподдерживаемая операция')

# Так как мы во всех ветках, кроме else, присвоили result
# какое-то новое значение, а изначально оно было None,
# result останется None, если пользователь ввёл недопустимую операцию.
# Таким образом, мы выводим результат только если операция была
# допустимой и он был вычислен.
if result is not None:
    # Аргументами функции print могут быть не только строки.
    # Здесь мы выводим число.
    print(result)

# числа в десятичной системе счисления
dec1 = 8
dec2 = 42
dec3 = -3
dec4 = 25802836572356723058203845293402834028304820938402834023580235777082489436236

print(dec1)
print(dec2)
print(dec3)
print(dec4)
print()

# числа в шестнадцатеричной системе счисления
hex1 = 0x9
hex2 = 0xA
hex3 = 0xFF
hex4 = 0x3de

print(hex1)
print(hex2)
print(hex3)
print(hex4)
print()

# число в двоичной системе счисления
bin1 = 0b11101101
print(bin1)
print()

# число в восьмеричной системе счисления
oct1 = 0o765
print(oct1)
print()

# построение целого числа из другого значения
string = "15"
number = int(string)
print(number)
print(number + 5)
# string + 5 -- ошибка

# истинное значение
bool1 = True

# ложное значение
bool2 = True

print(bool1)
print(bool2)

# примеры вещественных чисел
a = 0.5
b = 3.2

# примеры вещественных чисел в экспоненциальной записи
c = 3.2e5  # 3.2 * 10**5
d = 1e-3   # 1 * 10**(-3)

print(a, b, c, d)

# построение вещественного значения
print(float("0.5"))  # из строки
print(float(3))      # из целого числа

# примеры комплексных чисел
c1 = 2 + 3j  # 2 + 3i, 2 - действительная часть, 3 - мнимая
c2 = 5 - 5j  # 5 + 5i

# построение комплексного числа из вещественных
a = 2
b = 3
c3 = complex(a, b)
c4 = complex(5, -5)

print(c1, c2)
print(c3, c4)

# переменные - имена, которые привязываются к объектам
var = 'I am a string'
print(var)
print(type(var))  # type(var) возвращает тип объекта, на который ссылается var

print()

# их можно привязывать к новым значениям
var = 42
print(var)
print(type(var))

print()

# однако нужно понимать, какой тип в данный момент может
# иметь объект и смешивать несовместимые типы нельзя
a = 5
b = 5
print(a + b)  # два числа сложить можно

b = '5'
print(a + b)  # число со строкой - нет (получаем ошибку)

x = 2
y = 8
print(x + y)  # сложение
print(x + 3)
print(x - y)  # вычитание
print(x * y)  # произведение
print(x / y)  # деление
print(x // y) # целочисленное деление
print(x % y)  # остаток от деления
print(x ** y) # возведение в степень
print(3.2 * 0.8 - 2 * 5 - 3**3)  # арифметическое выражение
print(4 ** 0.5)  # возведение в степень 0.5 – квадратный корень

z = -2
print(abs(z))             # модуль числа
print(pow(z, 2), z ** 2)  # квадрат числа

m = 3.26
print(round(m), round(m, 1))  # округление числа до целого и до одного знака после запятой

import math  # импротируем модуль math

x = 3.265
# целое число, ближайшее целое снизу, ближайшее целое сверху
print(math.trunc(x), math.floor(x), math.ceil(x))

print(math.pi)  # константа пи
print(math.e)   # число Эйлера

y = math.sin(math.pi / 4)  # math.sin – синус
print(round(y, 2))

y = 1 / math.sqrt(2)  # math.sqrt – квадратный корень
print(round(y, 2))

# логические операции

print('and:')
print(False and False)
print(False and True)
print(True and False)
print(True and True)
print()

print('or:')
print(False or False)
print(False or True)
print(True or False)
print(True or True)
print()

print('not:')
print(not False)
print(not True)
print()


# логические выражения

a = True
b = False
c = True
f = a and not b or c or (a and (b or c))
print(f)

a = 2
b = 5

print(a < b)       # меньше
print(b > 3)       # больше
print(a <= 2)      # меньше или равно
print(b >= 7)      # больше или равно
print(a < 3 < b)   # двойное сравнение
print(a == b)      # равенство
print(a != b)      # неравенство
print(a is b)      # идентичность объектов в памяти
print(a is not b)  # a и b – разные объекты (хотя значения их могуть быть равны)

string = "some string"
second_string = string
third_string = input('Введите строку: ')
print(string is second_string)
print(string is third_string)

# примеры строк
s1 = "Строка 1"
s2 = 'Строка 2'
print(s1, s2)

# конструирование строки из другого значения
s3 = str(8)
print(s3)

# многострочные строки
s4 = """Lesson2. Variables and Data Types
Some data types explained in this lesson:
 - int
 - bool
 - float
 - complex
 - str
"""
print(s4)

# \ используется, чтобы продолжить строку
# или любое выражение в Python со следующей строчки кода
s5 = "started\
      continued"
print(s5)

# примеры строк
s1 = "Строка 1"
s2 = 'Строка 2'
print(s1, s2)

# конструирование строки из другого значения
s3 = str(8)
print(s3)

# многострочные строки
s4 = """Lesson2. Variables and Data Types
Some data types explained in this lesson:
 - int
 - bool
 - float
 - complex
 - str
"""
print(s4)

# \ используется, чтобы продолжить строку
# или любое выражение в Python со следующей строчки кода
s5 = "started\
      continued"
print(s5)

# указываем разделитель
print(2, 3, 5, sep='; ')
print('he', 'llo', sep='')  # он может быть и пустой строкой

# указываем конец строки
print(1, end=' ')
print(2, end='\n\n')  # два перевода строки
print('he', end='')    # пустой конец
print('llo')

# Ввод строки
string = input('Введите строку: ')
print('Вы ввели "', string, '"', sep='')

# Приглашение можно не указывать:
#         string = input()
# Результат, который возвращает любая функция,
# можно не привязывать ни к какому имени.
# Таким образом, следующая строка просто заставит
# программу ждать, пока пользователь что-то
# введёт или просто нажмёт Enter, а затем
# она продолжит выполнение.
input()


# введём два числа
n = int(input('Введите первое число: '))
m = int(input('Введите второе число: '))
print('{} + {} = {}'.format(n, m, n + m))

x = int(input('x = '))
# Если число x больше пяти, то будет выдано
# соответствующее сообщение
if x > 5:
    print('x больше пяти')

value = None

# Синтаксис языка требует, чтобы в блоке был по крайней
# мере один оператор, поэтому существует специальный
# оператор pass, который не делает ничего и который можно
# использовать для разного рода заглушек, нереализованного
# функционала и т.п.
if value is not None:
    pass

x = int(input('x = '))

# такая форма записи возможна, но нежелательна
if x < 0: x += 1

print(x)

x = int(input('x = '))
if x > 0:
    y = x ** 0.5
else:
    y = x ** 2
print(y)

x = int(input('x = '))

if 0 < x < 7:
    print('Значение x входит в заданный диапазон, продолжаем')
    y = 2 * x - 5
    if y < 0:
        print('Значение y отрицательно')
    else:
        if y > 0:
            print('Значение y положительно')
        else:
            print('y = 0')

x = int(input('x = '))

# Заменим второй вложенный if в предыдущем примере
# на оператор ветвления с несколькими условиями
if 0 < x < 7:
    print('Значение x входит в заданный диапазон, продолжаем')
    y = 2 * x - 5
    if y < 0:
        print('Значение y отрицательно')
    elif y > 0:
        print('Значение y положительно')
    else:
        print('y = 0')

print('''Меню:
      1. Файл
      2. Вид
      3. Выход
''')

choice = int(input('Ваш выбор: '))

if choice == 1:
    print('Вы выбрали пункт меню "Файл"')
elif choice == 2:
    print('Вы открыли меню "Вид"')
elif choice == 3:
    print('Завершение.')
else:
    print('Некорректный выбор')

is_ready = True

# Присваиваем значение переменной в зависимости от условия
if is_ready:
    state_msg = 'Ready'
else:
    state_msg = 'Not ready yet'

print(state_msg)

string = input('Enter a string: ')
# то же самое, что if string is not None and string != ''
if string:
    print('The string is {}'.format(string))

number = int(input('Enter a number: '))
if number:
    print('Число не равно нулю')
else:
    print('Число равно нулю')

